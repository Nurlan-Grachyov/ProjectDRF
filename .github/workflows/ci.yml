name: Django CI
on: [ push, pull_request ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install poetry
        uses: snok/install-poetry-action@v1
        with:
          version: latest

      - name: Cache poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies via poetry
        run: poetry install

      - name: Run database migrations
        run: poetry run python manage.py migrate

      - name: Run unit tests
        run: poetry run python manage.py test

  deploy:
    if: always() && github.event_name != 'pull_request' # Развёртывание только после успешных тестов
    runs-on: ubuntu-latest
    needs: test # Безуспешные тесты предотвратят развёртывание

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Sync code to remote server
        run: |
          rsync -avz --delete --exclude='__pycache__' . ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Install poetry remotely
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            curl -sSL https://install.python-poetry.org | python -
          EOF

      - name: Create virtual env & install dependencies
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -eo pipefail
            cd ${{ secrets.DEPLOY_DIR }}
            poetry config virtualenvs.create false
            poetry install
          EOF

      - name: Apply database migrations
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -eo pipefail
            cd ${{ secrets.DEPLOY_DIR }}
            poetry run python manage.py migrate
          EOF

      - name: Collect static assets
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            set -eo pipefail
            cd ${{ secrets.DEPLOY_DIR }}
            poetry run python manage.py collectstatic --noinput
          EOF

      - name: Restart the service
        run: |
          ssh -o StrictHostKeyChecking=yes ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            sudo systemctl restart myapp.service || true
          EOF